generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClientStatus {
  NEW
  ACTIVE
  INACTIVE
  VIP
  LOST
}

enum LeadStage {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  WON
  LOST
}

enum AppointmentStatus {
  BOOKED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id           String         @id @default(cuid())
  name         String
  email        String?        @unique
  phone        String?
  source       String?
  tags         String[]
  score        Int            @default(0)
  status       ClientStatus   @default(NEW)
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  leads        Lead[]
  appointments Appointment[]
  payments     Payment[]
  funnelEvents FunnelEvent[]
}

model Lead {
  id        String      @id @default(cuid())
  clientId  String
  source    String?
  notes     String?
  score     Int         @default(0)
  stage     LeadStage   @default(NEW)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Appointment {
  id        String            @id @default(cuid())
  clientId  String
  procedure String
  start     DateTime
  end       DateTime
  status    AppointmentStatus @default(BOOKED)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  payments  Payment[]

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Payment {
  id             String         @id @default(cuid())
  appointmentId  String
  clientId       String
  value          Decimal        @db.Decimal(10, 2)
  method         String
  status         PaymentStatus  @default(PENDING)
  pixTxid        String?
  comprovanteUrl String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([appointmentId])
  @@index([clientId])
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  channel     String
  message     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  logs        CampaignLog[]
}

model FunnelEvent {
  id        String   @id @default(cuid())
  clientId  String
  type      String
  meta      Json?
  createdAt DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([type, createdAt])
}

model CampaignLog {
  id         String   @id @default(cuid())
  campaignId String
  message    String
  createdAt  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}
